import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import pkg_resources

class IoTNetworkMalwareClassifier:

    def __init__(self):
        self.model_file = "data/model.h5"
        self.weights_file = "data/weights.h5"
        self.label_encoder = LabelEncoder()
        self.scaler = StandardScaler()
        self.categorical_columns = ['id.orig_h', 'id.orig_p', 'id.resp_h', 'id.resp_p', 'proto', 'conn_state', 'history', 'orig_pkts', 'orig_ip_bytes', 'resp_pkts', 'resp_ip_bytes']
        self._load_model()

    def _load_model(self):
        self.model = load_model(pkg_resources.resource_filename('IoTNetworkMalwareClassifier', self.model_file))
        self.model.load_weights(pkg_resources.resource_filename('IoTNetworkMalwareClassifier', self.weights_file))

    def preprocess_data(self, data):
        # Encode categorical columns
        for column in self.categorical_columns:
            data[column] = self.label_encoder.fit_transform([data[column]])

        # Scale numerical columns
        numerical_data = [data[column] for column in data if column not in self.categorical_columns]
        numerical_data_scaled = self.scaler.transform(numerical_data)

        # Concatenate encoded categorical data and scaled numerical data
        preprocessed_data = np.concatenate([data[column] for column in self.categorical_columns], numerical_data_scaled)

        return preprocessed_data

    def predict(self, data):
        preprocessed_data = self.preprocess_data(data)
        prediction = self.model.predict(preprocessed_data)
        return prediction